generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  admin
  receptionist
  security
  visitor
}

enum VisitStatus {
  pending
  approved
  rejected
  checked_in
  checked_out
  cancelled
}

enum VisitType {
  business
  personal
  delivery
  maintenance
  interview
  other
}

enum DocumentType {
  id_card
  passport
  driving_license
  other
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  firstName String   @map("first_name")
  lastName  String   @map("last_name")
  role      UserRole @default(receptionist)
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  visitsCreated Visit[] @relation("VisitCreatedBy")
  visitsUpdated Visit[] @relation("VisitUpdatedBy")

  @@map("users")
}

model Department {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?  @db.Text
  contactPerson String? @map("contact_person")
  contactEmail String? @map("contact_email")
  contactPhone String? @map("contact_phone")
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  visits Visit[]

  @@map("departments")
}

model Visitor {
  id          String   @id @default(uuid())
  firstName   String   @map("first_name")
  lastName    String   @map("last_name")
  email       String?
  phone       String?
  company     String?
  documentType DocumentType @default(id_card) @map("document_type")
  documentNumber String @map("document_number")
  documentExpiry DateTime? @map("document_expiry")
  photoPath   String?  @map("photo_path")
  notes       String?  @db.Text
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  visits Visit[]
  documents VisitorDocument[]

  @@map("visitors")
}

model Visit {
  id                String      @id @default(uuid())
  visitorId         String      @map("visitor_id")
  departmentId      String      @map("department_id")
  hostUserId        String?     @map("host_user_id")
  visitType         VisitType   @default(business)
  purpose           String      @db.Text
  scheduledDate     DateTime    @map("scheduled_date")
  scheduledTimeStart DateTime   @map("scheduled_time_start")
  scheduledTimeEnd DateTime     @map("scheduled_time_end")
  actualCheckIn     DateTime?   @map("actual_check_in")
  actualCheckOut    DateTime?   @map("actual_check_out")
  status            VisitStatus @default(pending)
  notes             String?     @db.Text
  badgeNumber       String?     @map("badge_number")
  qrCode            String?     @map("qr_code")
  createdById       String      @map("created_by_id")
  updatedById       String?     @map("updated_by_id")
  createdAt         DateTime    @default(now()) @map("created_at")
  updatedAt         DateTime    @updatedAt @map("updated_at")

  // Relations
  visitor    Visitor   @relation(fields: [visitorId], references: [id], onDelete: Cascade)
  department Department @relation(fields: [departmentId], references: [id], onDelete: Restrict)
  createdBy  User      @relation("VisitCreatedBy", fields: [createdById], references: [id], onDelete: Restrict)
  updatedBy  User?     @relation("VisitUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull)

  @@map("visits")
}

model VisitorDocument {
  id         String   @id @default(uuid())
  visitorId  String   @map("visitor_id")
  fileName   String   @map("file_name")
  filePath   String   @map("file_path")
  fileSize   Int      @map("file_size")
  mimeType   String   @map("mime_type")
  uploadedAt DateTime @default(now()) @map("uploaded_at")

  // Relations
  visitor Visitor @relation(fields: [visitorId], references: [id], onDelete: Cascade)

  @@map("visitor_documents")
}