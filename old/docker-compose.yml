# CoreVisitor - Applicazione (usa servizi condivisi dalla core-network)
#
# IMPORTANTE: Prima di avviare questo stack, assicurati che i servizi condivisi siano attivi
# e che la network 'core-network' esista
#
# Avvio:   docker-compose up -d
# Stop:    docker-compose down
# Logs:    docker-compose logs -f

services:
  # Backend API (NestJS)
  backend:
    build:
      context: .
      dockerfile: apps/backend/Dockerfile
    container_name: corevisitor-backend
    restart: unless-stopped
    environment:
      # Database - usa il MySQL condiviso (in Docker usa 'mysql' come host)
      DATABASE_URL: mysql://${MYSQL_USER}:${MYSQL_PASSWORD}@mysql:3306/${MYSQL_DATABASE}

      # JWT
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN}

      # MinIO - usa il MinIO condiviso (in Docker usa 'minio' come host)
      MINIO_ENDPOINT: minio
      MINIO_PORT: ${MINIO_PORT}
      MINIO_USE_SSL: ${MINIO_USE_SSL}
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
      MINIO_BUCKET_NAME: ${MINIO_BUCKET_NAME}

      # Meilisearch - usa il Meilisearch condiviso (in Docker usa 'meilisearch' come host)
      MEILISEARCH_HOST: http://meilisearch:7700
      MEILISEARCH_API_KEY: ${MEILISEARCH_API_KEY}

      # SMTP
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_SECURE: ${SMTP_SECURE}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      SMTP_FROM: ${SMTP_FROM}

      # App
      APP_PORT: ${APP_PORT}
      NODE_ENV: production
    ports:
      - "${APP_PORT}:${APP_PORT}"
    networks:
      - core-network  # Usa la network condivisa
    command: sh -c "npx prisma migrate deploy || true && node dist/main"

  # Frontend (Next.js)
  frontend:
    build:
      context: .
      dockerfile: apps/frontend/Dockerfile
      args:
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
    container_name: corevisitor-frontend
    restart: unless-stopped
    environment:
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
      NODE_ENV: production
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - core-network  # Usa la network condivisa

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: corevisitor-nginx
    restart: unless-stopped
    ports:
      - "83:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - core-network  # Usa la network condivisa

# Usa la network esterna condivisa
networks:
  core-network:
    external: true
    name: core-network
